#define STB_IMAGE_IMPLEMENTATION

#include <vector>

#include <GL/glew.h>

#include <jelly/window.h>
#include <jelly/camera.h>
#include <jelly/shader.h>
#include <jelly/texture2d.h>

#include <jelly/graphics/buffer.h>
#include <jelly/graphics/indexbuffer.h>
#include <jelly/graphics/vertexarray.h>

GLfloat lastX = 400;
GLfloat lastY = 300;
bool firstMouseMove = true;

void processInput(Camera* camera, Window* window);

std::vector<GLfloat> vertices = {
  0.5f,  0.5f, 0.0f,   // Top Right
  0.5f, -0.5f, 0.0f,   // Bottom Right
  -0.5f, -0.5f, 0.0f,  // Bottom Left
  -0.5f,  0.5f, 0.0f   // Top Left
};

std::vector<GLfloat> tcords = {
  1.0f, 1.0f,
  1.0f, 0.0f,
  0.0f, 0.0f,
  0.0f, 1.0f
};

std::vector<GLushort> indices = {
  0, 1, 3,
  1, 2, 3
};

std::vector<GLfloat> tv;
std::vector<GLfloat> tn;
std::vector<GLfloat> tt;
std::vector<GLushort> ti;

int main()
{

  Window window("OJ", 960, 660);
  Camera camera(glm::vec3(0.0f, 0.5f, 1.0f));
  Shader basic("assets/basic.vert", "assets/basic.frag");
  Texture2D dirt("assets/textures/dirt.jpg");

  // BOX

  VertexArray vvao;
  IndexBuffer ibo(indices);
  vvao.addBuffer(new Buffer(vertices, 3), 0);
  vvao.addBuffer(new Buffer(tcords, 2), 2);

  // TERRAIN
  const float SIZE = 10.0f;
  const int VERTEX_COUNT = 128;
  int count = VERTEX_COUNT * VERTEX_COUNT;

  tv.resize(count * 3);
  tn.resize(count * 3);
  tt.resize(count * 2);
  ti.resize(6 * (VERTEX_COUNT-1) * (VERTEX_COUNT-1));

  int vPointer = 0;
  for (int i = 0; i < VERTEX_COUNT; i++) {
      for (int j = 0; j < VERTEX_COUNT; j++) {
          // Vertices
          tv[vPointer * 3]     = ((float)j / ((float)VERTEX_COUNT - 1) * SIZE) - (SIZE/2);
          tv[vPointer * 3 + 1] = 0.0f;
          tv[vPointer * 3 + 2] = ((float)i / ((float)VERTEX_COUNT - 1) * SIZE) - (SIZE/2);
          // Normals
          tn[vPointer * 3]     = 0.0f;
          tn[vPointer * 3 + 1] = 1.0f;
          tn[vPointer * 3 + 2] = 0.0f;
          // TexCoords
          tt[vPointer * 2]     = ((float)j / ((float)VERTEX_COUNT - 1));
          tt[vPointer * 2 + 1] = ((float)i / ((float)VERTEX_COUNT - 1));

          vPointer++;
        }
    }

  int iPointer = 0;
  for (int gz = 0; gz < VERTEX_COUNT-1; gz++) {
      for (int gx = 0; gx < VERTEX_COUNT-1; gx++) {
          ushort topLeft = (gz * VERTEX_COUNT) + gx;
          ushort topRight = topLeft + 1;
          ushort bottomLeft = ((gz + 1) * VERTEX_COUNT) + gx;
          ushort bottomRight = bottomLeft + 1;

          ti[iPointer++] = topLeft;
          ti[iPointer++] = bottomLeft;
          ti[iPointer++] = topRight;
          ti[iPointer++] = topRight;
          ti[iPointer++] = bottomLeft;
          ti[iPointer++] = bottomRight;
        }
    }


  VertexArray pVAO;
  IndexBuffer ind_Terrain(ti);

  pVAO.addBuffer(new Buffer(tv, 3), 0);
  pVAO.addBuffer(new Buffer(tn, 3), 1);
  pVAO.addBuffer(new Buffer(tt, 2), 2);

//  GLuint vao;
//  glGenVertexArrays(1, &vao);
//  glBindVertexArray(vao);

//  GLuint vertVbo;
//  glGenBuffers(1, &vertVbo);
//  glBindBuffer(GL_ARRAY_BUFFER, vertVbo);
//  glBufferData(GL_ARRAY_BUFFER, sizeof(float) * tv.size(), &tv[0], GL_STATIC_DRAW);
//  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
//  glEnableVertexAttribArray(0);

//  GLuint normVbo;
//  glGenBuffers(1, &normVbo);
//  glBindBuffer(GL_ARRAY_BUFFER, normVbo);
//  glBufferData(GL_ARRAY_BUFFER, sizeof(float) * tn.size(), &tn[0], GL_STATIC_DRAW);
//  glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
//  glEnableVertexAttribArray(1);

//  GLuint texVbo;
//  glGenBuffers(1, &texVbo);
//  glBindBuffer(GL_ARRAY_BUFFER, texVbo);
//  glBufferData(GL_ARRAY_BUFFER, sizeof(float) * tt.size(), &tt[0], GL_STATIC_DRAW);
//  glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), (GLvoid*)0);
//  glEnableVertexAttribArray(2);

//  glBindBuffer(GL_ARRAY_BUFFER, 0);

//  GLuint ebo;
//  glGenBuffers(1, &ebo);
//  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
//  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(int) * ti.size(), &ti[0], GL_STATIC_DRAW);

//  glBindVertexArray(0);

  glm::mat4 projection = glm::perspective(camera.fov, window.aspectRatio, 0.1f, 100.0f);
  basic.setUniform("projection", &projection);

  glm::mat4 model;
  basic.setUniform("model", &model);

  while(!window.closed()) {

      processInput(&camera, &window);

      glm::mat4 view = camera.getView();
      basic.setUniform("view", &view);

      window.clear(0.2f, 0.2f, 0.2f, 1.0f);

      glBindTexture(GL_TEXTURE_2D, dirt.id);

      pVAO.bind();
      ind_Terrain.bind();
      glDrawElements(GL_TRIANGLES, ind_Terrain.getCount(), GL_UNSIGNED_INT, 0);
      pVAO.unbind();

//      vvao.bind();
//      ibo.bind();
//      glDrawElements(GL_TRIANGLES, ibo.getCount(), GL_UNSIGNED_SHORT, 0);
//      vvao.unbind();

      window.update();
    }

  return 0;
}

void processInput(Camera* camera, Window* window) {

  if(window->isKeyPressed(GLFW_KEY_ESCAPE))
    window->close();

  if(window->isKeyPressed(GLFW_KEY_1))
    window->enableCursor();

  if(window->isKeyPressed(GLFW_KEY_2))
    window->disableCursor();

  if (window->isKeyPressed(GLFW_KEY_W))
    camera->move(FORWARD, window->delta);

  if (window->isKeyPressed(GLFW_KEY_S))
    camera->move(BACKWARDS, window->delta);

  if (window->isKeyPressed(GLFW_KEY_A))
    camera->move(LEFT, window->delta);

  if (window->isKeyPressed(GLFW_KEY_D))
    camera->move(RIGHT, window->delta);

  if (window->isKeyPressed(GLFW_KEY_SPACE))
    camera->move(UP, window->delta);

  if (window->isKeyPressed(GLFW_KEY_LEFT_SHIFT))
    camera->move(DOWN, window->delta);

  if (window->hasMouseMoved()) {

      if (firstMouseMove) {
          lastX = window->getMousePosition().x;
          lastY = window->getMousePosition().y;
          firstMouseMove = false;
        }

      glm::vec2 mousePos = window->getMousePosition();

      GLfloat xoffset = mousePos.x - lastX;
      GLfloat yoffset = mousePos.y - lastY;

      lastX = mousePos.x;
      lastY = mousePos.y;

      camera->look(xoffset, yoffset);
    }
}
